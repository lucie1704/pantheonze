model Order {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @db.ObjectId
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId       String?      @db.ObjectId
  store         Store?       @relation(fields: [storeId], references: [id])
  pickupSlotId  String?      @db.ObjectId
  pickupSlot    PickupSlot?  @relation(fields: [pickupSlotId], references: [id])
  items         OrderItem[]
  subtotal      Float
  taxAmount     Float        @default(0)
  discount      Float        @default(0)
  total         Float
  status        OrderStatus  @default(PENDING)
  pickupInfo    PickupInfo?
  customerName  String
  customerEmail String
  customerPhone String?
  paymentMethod String?
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  notes         String?
  estimatedReady DateTime?
  readyAt       DateTime?
  pickedUpAt    DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([customerEmail])
  @@index([storeId])
  @@index([pickupSlotId])
}